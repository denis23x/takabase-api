generator client {
  provider        = "prisma-client-js"
  output          = "client"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("API_DATABASE_URL")
  directUrl    = env("API_DATABASE_DIRECT_URL")
}

model User {
  id               Int        @id @default(autoincrement()) @db.Int
  firebaseUid      String     @unique @db.VarChar(255)
  name             String     @unique @db.VarChar(255)
  description      String?    @db.VarChar(255)
  avatar           String?    @db.VarChar(255)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt
  deletedAt        DateTime?  @db.DateTime(6)
  terms            Boolean    @default(true) @db.TinyInt
  categories       Category[]
  posts            Post[]
  postsBookmark    PostBookmark[]
  postsPassword    PostPassword[]
  postsPrivate     PostPrivate[]

  @@unique([id, firebaseUid])
  @@index([firebaseUid])
}

model Category {
  id                Int       @id @default(autoincrement()) @db.Int
  userFirebaseUid   String    @db.VarChar(255)
  name              String    @db.VarChar(255)
  description       String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  user              User      @relation(fields: [userFirebaseUid], references: [firebaseUid], onDelete: Cascade)
  posts             Post[]

  @@unique([name, userFirebaseUid])
  @@index([userFirebaseUid])
}

model Post {
  id                Int       @id @default(autoincrement()) @db.Int
  name              String    @db.VarChar(255)
  firebaseUid       String    @unique @db.VarChar(255)
  description       String    @db.VarChar(255)
  markdown          String    @db.Text
  image             String?   @db.VarChar(255)
  userFirebaseUid   String    @db.VarChar(255)
  categoryId        Int       @db.Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userFirebaseUid], references: [firebaseUid], onDelete: Cascade)
  bookmark          PostBookmark[]

  @@unique([name, categoryId])
  @@index([categoryId])
  @@index([firebaseUid])
  @@index([userFirebaseUid])
}

model PostBookmark {
  id                Int       @id @default(autoincrement()) @db.Int
  postId            Int       @db.Int
  userFirebaseUid   String    @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  post              Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userFirebaseUid], references: [firebaseUid], onDelete: Cascade)

  @@unique([postId, userFirebaseUid])
  @@index([postId])
  @@index([userFirebaseUid])
}

model PostPassword {
  id                Int       @id @default(autoincrement()) @db.Int
  name              String    @db.VarChar(255)
  description       String    @db.VarChar(255)
  markdown          String    @db.Text
  image             String?   @db.VarChar(255)
  userFirebaseUid   String    @db.VarChar(255)
  password          String    @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  user              User      @relation(fields: [userFirebaseUid], references: [firebaseUid], onDelete: Cascade)

  @@unique([name, userFirebaseUid])
  @@index([userFirebaseUid])
}

model PostPrivate {
  id                Int       @id @default(autoincrement()) @db.Int
  name              String    @db.VarChar(255)
  description       String    @db.VarChar(255)
  markdown          String    @db.Text
  image             String?   @db.VarChar(255)
  userFirebaseUid   String    @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  user              User      @relation(fields: [userFirebaseUid], references: [firebaseUid], onDelete: Cascade)

  @@unique([name, userFirebaseUid])
  @@index([userFirebaseUid])
}

model Insights {
  id                Int       @id @default(autoincrement()) @db.Int
  categories        Int       @db.Int
  posts             Int       @db.Int
  users             Int       @db.Int
  unix              BigInt    @unique @db.BigInt
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)

  @@index([unix])
}
