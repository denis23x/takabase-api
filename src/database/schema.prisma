generator client {
  provider        = "prisma-client-js"
  output          = "client"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("API_MYSQL_DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement()) @db.Int
  firebaseUid String     @unique @db.VarChar(255)
  name        String     @unique @db.VarChar(255)
  description String?    @db.VarChar(255)
  avatar      String?    @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  deletedAt   DateTime?  @db.DateTime(6)
  terms       Boolean    @default(true) @db.TinyInt
  categories  Category[]
  posts       Post[]

  @@unique([id, firebaseUid])

  @@index([firebaseUid])
}

model Category {
  id                Int       @id @default(autoincrement()) @db.Int
  userId            Int       @db.Int
  userFirebaseUid   String    @db.VarChar(255)
  name              String    @db.VarChar(255)
  description       String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  user              User      @relation(fields: [userId, userFirebaseUid], references: [id, firebaseUid], onDelete: NoAction, onUpdate: NoAction)
  posts             Post[]

  @@unique([name, userId])

  @@index([userId])
  @@index([userFirebaseUid])
}

model Post {
  id                Int       @id @default(autoincrement()) @db.Int
  name              String    @db.VarChar(255)
  firebaseUid       String    @unique @db.VarChar(255)
  description       String    @db.VarChar(255)
  markdown          String    @db.Text
  image             String?   @db.VarChar(255)
  userId            Int       @db.Int
  userFirebaseUid   String    @db.VarChar(255)
  categoryId        Int       @db.Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime? @db.DateTime(6)
  category          Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation(fields: [userId, userFirebaseUid], references: [id, firebaseUid], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, categoryId])

  @@index([firebaseUid])
  @@index([categoryId])
  @@index([userId])
  @@index([userFirebaseUid])
}
